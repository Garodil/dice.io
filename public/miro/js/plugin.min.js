/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(2);

var _miroPluginApp = _interopRequireDefault(__webpack_require__(3));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// plugin.js

/* global DiceIO, miro */
function startApp(nickname, channel) {
  // Create dice roller client instance
  var pathname = window.location.pathname.replace(/miro\/sidebar\.html$/gi, '');
  var diceRoller = new DiceIO({
    channel: channel,
    nickname: nickname,
    serverUrl: window.location.origin,
    socketOptions: {
      path: pathname + 'socket.io'
    }
  }); // Start Miro web plugin application

  var app = new _miroPluginApp["default"](diceRoller); // eslint-disable-line no-unused-vars
}

miro.onReady(function () {
  // Attempt to get current user name (dice roller nickname)
  miro.currentUser.getId().then(function (id) {
    fetch('https://miro.com/api/v1/users/' + id).then(function (response) {
      return response.json();
    }).then(function (data) {
      // Attempt to get team account id (dice roller channel)
      miro.account.get().then(function (account) {
        startApp(data.name, 'miro' + account.id);
      })["catch"](function (e) {
        console.log('[Dice Roller] Failed to get team account id', e);
      });
    })["catch"](function (e) {
      console.log('[Dice Roller] Failed to get current user nickname', e);
    });
  });
});

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _dom = __webpack_require__(4);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DICE_MP3_PATH = '../mp3/dice.mp3';

var MiroPluginApp = /*#__PURE__*/function () {
  function MiroPluginApp(diceRoller) {
    _classCallCheck(this, MiroPluginApp);

    this._diceRoller = diceRoller;

    this._setupDiceRoller();

    this._setupApp();
  }

  _createClass(MiroPluginApp, [{
    key: "_setupApp",
    value: function _setupApp() {
      var _this = this;

      // Dice formula input text
      this.formula.addEventListener('keyup', function (event) {
        if (event.keyCode === 13) {
          event.preventDefault();

          if ((0, _dom.str)(_this.formula.value).length > 1) {
            _this._diceRoller.roll(_this.formula.value);
          } else {
            _this._inputErrorAnimation(_this.formula);
          }
        }
      }); // Date time formatter

      this._IntlDateFormatter = new Intl.DateTimeFormat(undefined, {
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric'
      }); // Load dice roll sound

      this._diceSound = new Audio(DICE_MP3_PATH);
    }
  }, {
    key: "_setupDiceRoller",
    value: function _setupDiceRoller() {
      var _this2 = this;

      this._diceRoller.onError(function () {
        _this2._inputErrorAnimation(_this2.formula);
      }).onDisconnect(function (config) {
        // TODO: display disconnect error in miro sidebar ?
        console.log('Disconnected from ' + config.serverUrl);
      }).onConnect(function (config) {
        console.log('Connected to ' + config.serverUrl);
      }).onHistory(function (history) {
        _this2._onHistory(history);
      }).onRoll(function (result) {
        _this2._onRoll(result);
      }).connect();
    }
  }, {
    key: "_onHistory",
    value: function _onHistory(history) {
      var _this3 = this;

      this._empty(this.rolls); // history is an Array of roll results


      history.forEach(function (result) {
        _this3._appendRoll(result);
      });

      this._scrollToBottom(this.rolls);
    }
  }, {
    key: "_onRoll",
    value: function _onRoll(result) {
      // console.log('onRoll', result)
      this._playRollSound();

      this._appendRoll(result);

      this._scrollToBottom(this.rolls);
    }
  }, {
    key: "_playRollSound",
    value: function _playRollSound() {
      this._diceSound.load();

      this._diceSound.play();
    }
  }, {
    key: "_appendRoll",
    value: function _appendRoll(result) {
      var roll = (0, _dom.make)('div', {
        "class": 'diceroller-roll'
      });
      var name = (0, _dom.make)('div', {
        "class": 'diceroller-roll__name'
      });
      name.appendChild((0, _dom.make)('span', {
        attr: {
          title: result.nickname
        },
        text: result.nickname
      }));
      roll.appendChild(name);
      var time = (0, _dom.make)('div', {
        "class": 'diceroller-roll__time'
      });
      time.appendChild((0, _dom.make)('span', {
        text: this._formatTimestamp(result.timestamp)
      }));
      roll.appendChild(time);
      roll.appendChild((0, _dom.make)('div', {
        "class": 'clear'
      }));
      roll.appendChild((0, _dom.make)('div', {
        "class": 'diceroller-roll__formula',
        text: result.roll.formula
      }));
      roll.appendChild((0, _dom.make)('div', {
        "class": 'diceroller-roll__message',
        text: result.roll.message
      }));
      roll.appendChild((0, _dom.make)('div', {
        "class": 'diceroller-roll__value',
        text: result.roll.value
      }));
      this.rolls.appendChild(roll);
      this.rolls.appendChild((0, _dom.make)('div', {
        "class": 'diceroller-rolls__border'
      }));
    }
  }, {
    key: "_formatTimestamp",
    value: function _formatTimestamp(timestamp) {
      return this._IntlDateFormatter.format(new Date(timestamp));
    }
  }, {
    key: "_empty",
    value: function _empty(element) {
      var last;

      while (last = element.lastChild) {
        // eslint-disable-line no-cond-assign
        element.removeChild(last);
      }
    }
  }, {
    key: "_scrollToBottom",
    value: function _scrollToBottom(element) {
      element.scrollTop = element.scrollHeight - element.clientHeight;
    }
  }, {
    key: "_inputErrorAnimation",
    value: function _inputErrorAnimation(inputElement) {
      var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'input-error';
      var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;
      // (plugin.css): default input error animation is 0.1 * 3 = 300 milliseconds
      (0, _dom.addOneClass)(inputElement, className);
      setTimeout(function () {
        (0, _dom.removeClass)(inputElement, className);
      }, duration);
    }
  }, {
    key: "formula",
    get: function get() {
      return (0, _dom.el)('.diceroller-bottom__formula');
    }
  }, {
    key: "rolls",
    get: function get() {
      return (0, _dom.el)('.diceroller-rolls');
    }
  }]);

  return MiroPluginApp;
}();

exports["default"] = MiroPluginApp;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.str = str;
exports.el = el;
exports.addOneClass = addOneClass;
exports.addClass = addClass;
exports.removeClass = removeClass;
exports.toggleClass = toggleClass;
exports.attr = attr;
exports.make = make;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// dom.js
// Convert value to string
function str(v) {
  return v + '';
} // Query selector shortcut


function el(s) {
  return document.querySelector(s);
} // Adds single class value to element


function addOneClass(e, c) {
  if (e.classList) {
    e.classList.add(c);
  } else {
    if (e.className.split(' ').indexOf(c) == -1) {
      e.className += ' ' + c;
    }
  }

  return e;
} // Adds class values to element


function addClass(e, c) {
  str(c).split(' ').forEach(function (i) {
    e = addOneClass(e, i);
  });
  return e;
} // Remove single class value from element


function removeClass(e, c) {
  if (e.classList) {
    e.classList.remove(c);
  } else {
    e.className = e.className.replace(new RegExp("\\b" + c + "\\b", 'g'), '');
  }

  return e;
} // Toggle single class value from element


function toggleClass(e, c) {
  if (e.classList) {
    e.classList.toggle(c);
  } else {
    var arr = e.className.split(' ');
    var i = arr.indexOf(c);

    if (i >= 0) {
      arr.splice(i, 1);
    } else {
      arr.push(c);
    }

    e.className = arr.join(" ");
  }

  return e;
} // Get or add single element attribute value


function attr(e, n) {
  var v = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

  if (v === undefined) {
    return e.getAttribute(n);
  } // Add "no value" attribute if value is null


  if (v === null) {
    e.setAttributeNode(document.createAttribute(n));
  } else {
    e.setAttribute(n, v);
  }

  return e;
} // Make an element


function make(n) {
  var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var e = document.createElement(n);

  if (o["class"]) {
    e = addClass(e, o["class"]);
  }

  if (o.text) {
    e.innerText = o.text;
  }

  if (o.attr && _typeof(o.attr) === 'object') {
    for (var k in o.attr) {
      attr(e, k, o.attr[k]);
    }
  }

  if (o.html) {
    e.innerHTML = o.html;
  }

  return e;
}

/***/ })
/******/ ]);